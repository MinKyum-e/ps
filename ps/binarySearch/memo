sequential search : 앞에서부터 순차적으로 탐색 (보통 정렬되지 않은 리스트에서 데이터를 찾기 위해) O(N)
Binary Search : 정렬되어 있을 때만 사용 
시작, 중간 끝을 탐색하여 찾음

보통 탐색범위가 2000만 이상일 때 이진 탐색으로 접근

트리 자료구조
:대용량 데이터 처리에 적합한 자료구조. 항상 정렬되어있음 = 데이터가 많아도 탐색하는 속도가 빠름

트리 : 부모 노드와 자식노드의 관계로 표현
최상단 노드 : 루트 노드
최하단 노드 : 단말 노드
서브트리 : 트리의 일부를 떼어내도 트리임
== 파일 시스템처럼 계층적이고 정렬된 데이터를 다루기에 적합함

이진탐색 트리
: 이진 탐색이 동작할 수 있도록 고안된, 효율적인 탐색이 가능한 자료구조
1. 부모 노드보다 왼쪽 자식노드가 작다
2. 부모 노드보다 오른쪽 자식 노드가 크다

알고리즘 테스트에서 이진 탐색 트리 자료구조를 구현하도록 요구하는 문제는 출제 빈도가 낮으므로 트리가 구현되어 있다고 가정하고 조회 과정만 알아보자

이진 탐색 문제는 입력 데이터가 많거나 탐색 범위가 넓을 떄 사용한다
1. 데이터 수가 1000만개가 넘는경우
2. 탐색 범위의 크기가 1000억 이상인 경우

파이썬 input은 느리므로 sys라이브러리의 readline함수를 사용해야한다
import sys
input_data = sys.stdin.readline().rstrip() # 문자열 그대로 받음
